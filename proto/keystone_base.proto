syntax = "proto3";

package keystone;
option go_package = "./keystone" ;

// keygenAlgorithm is the algorithm that should be used
// for generating a key - typically the EC curve in use
// that the key is related to.
enum keygenAlgorithm {
  KEYGEN_SECP256K1 = 0 ;
  KEYGEN_SECP256R1 = 1 ;
  KEYGEN_ED25519   = 2 ;
}

enum signingProfile {
  // ECDSA signing, SHA256 prior to signature, low-s normalization,
  // and raw r, s values instead of ASN
  PROFILE_BC_ECDSA_SHA256 = 0 ;

  // ECDSA signing, SHA512 prior to signature, low-s normalization,
  // and raw r, s values instead of ASN  
  PROFILE_BC_ECDSA_SHA512 = 1 ;

  // ECDSA signing, SHA256 prior to signature, no normalization, and
  // standard ASN1 encoding
  PROFILE_ECDSA_SHA256 =    2 ;

  // ECDSA signing, caller is expected to hash (or not), standard ASN1
  // encoding
  PROFILE_ECDSA_NOHASH =    3 ;
}

message helo {
  uint64           id = 1 ;
  bytes            publicKey = 2 ;
  bytes            encTimestamp = 3 ;
  bytes            signedIdKey = 4 ;
}

message ehlo {
  uint64           id = 1 ;
  uint64           inResponseTo = 2 ;
  bytes            publicKey = 3 ;
  bytes            encTimestamp = 4 ;
  bytes            signedIdKey = 5 ;
}

message keySpec {
  uint64           id = 1 ;
  string           label = 2 ;
  sfixed32         size = 3 ;
  keygenAlgorithm  algo = 4 ;
  string           keyringId = 5 ;
}

message keyMetadata {
  uint64           id = 1 ;
  uint64           inResponseTo = 2 ;
  uint64           keyId = 3 ;
  sfixed32         size = 4 ;
  keygenAlgorithm  algo = 5 ;
}

message keyRef {
  uint64           id = 1 ;
  uint64           inResponseTo = 2 ;
  string           label = 3 ;
  string           keyringId = 4 ;
  string           issuerUrl = 5 ;
  uint64           expires = 6 ;
  string           issuerIdUrl = 7 ;
}

message publicKey {
  uint64           id = 1 ;
  uint64           inResponseTo = 2 ;
  string           label = 3 ;
  bytes            keyBytes = 4 ;
}

message signable {
  uint64           id = 1 ;
  oneof data {
    bytes          signableBytes = 1 ;
    string         txref = 2 ;
  }
}

message signed {
  uint64           id = 1 ;       
  uint64           inResponseTo = 2 ;
  oneof data {
    bytes          signedBytes = 3 ;
    string         signedTxRef = 4 ;
    int32          error = 5 ;
  }
}

message msg {
  uint64           id = 1 ;
  uint64           inResponseTo = 2 ;
  keySpec          keySpec = 2 ;
  signingProfile   signingProfile = 3 ;
  signable         content = 4 ;
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.14.0
// source: keystone2_admin.proto

package keystone_admin

import (
	keystone "./keystone"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KeyringAdminClient is the client API for KeyringAdmin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeyringAdminClient interface {
	NewKeyring(ctx context.Context, in *KeyringSpec, opts ...grpc.CallOption) (*KeyringRef, error)
	Keys(ctx context.Context, in *KeyringSpec, opts ...grpc.CallOption) (*KeyrefList, error)
	Label(ctx context.Context, in *keystone.Empty, opts ...grpc.CallOption) (*KeyringLabel, error)
	Remove(ctx context.Context, in *keystone.KeySpec, opts ...grpc.CallOption) (*keystone.Result, error)
}

type keyringAdminClient struct {
	cc grpc.ClientConnInterface
}

func NewKeyringAdminClient(cc grpc.ClientConnInterface) KeyringAdminClient {
	return &keyringAdminClient{cc}
}

func (c *keyringAdminClient) NewKeyring(ctx context.Context, in *KeyringSpec, opts ...grpc.CallOption) (*KeyringRef, error) {
	out := new(KeyringRef)
	err := c.cc.Invoke(ctx, "/keystone.keyringAdmin/newKeyring", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyringAdminClient) Keys(ctx context.Context, in *KeyringSpec, opts ...grpc.CallOption) (*KeyrefList, error) {
	out := new(KeyrefList)
	err := c.cc.Invoke(ctx, "/keystone.keyringAdmin/keys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyringAdminClient) Label(ctx context.Context, in *keystone.Empty, opts ...grpc.CallOption) (*KeyringLabel, error) {
	out := new(KeyringLabel)
	err := c.cc.Invoke(ctx, "/keystone.keyringAdmin/label", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyringAdminClient) Remove(ctx context.Context, in *keystone.KeySpec, opts ...grpc.CallOption) (*keystone.Result, error) {
	out := new(keystone.Result)
	err := c.cc.Invoke(ctx, "/keystone.keyringAdmin/remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeyringAdminServer is the server API for KeyringAdmin service.
// All implementations must embed UnimplementedKeyringAdminServer
// for forward compatibility
type KeyringAdminServer interface {
	NewKeyring(context.Context, *KeyringSpec) (*KeyringRef, error)
	Keys(context.Context, *KeyringSpec) (*KeyrefList, error)
	Label(context.Context, *keystone.Empty) (*KeyringLabel, error)
	Remove(context.Context, *keystone.KeySpec) (*keystone.Result, error)
	mustEmbedUnimplementedKeyringAdminServer()
}

// UnimplementedKeyringAdminServer must be embedded to have forward compatible implementations.
type UnimplementedKeyringAdminServer struct {
}

func (UnimplementedKeyringAdminServer) NewKeyring(context.Context, *KeyringSpec) (*KeyringRef, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewKeyring not implemented")
}
func (UnimplementedKeyringAdminServer) Keys(context.Context, *KeyringSpec) (*KeyrefList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Keys not implemented")
}
func (UnimplementedKeyringAdminServer) Label(context.Context, *keystone.Empty) (*KeyringLabel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Label not implemented")
}
func (UnimplementedKeyringAdminServer) Remove(context.Context, *keystone.KeySpec) (*keystone.Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedKeyringAdminServer) mustEmbedUnimplementedKeyringAdminServer() {}

// UnsafeKeyringAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeyringAdminServer will
// result in compilation errors.
type UnsafeKeyringAdminServer interface {
	mustEmbedUnimplementedKeyringAdminServer()
}

func RegisterKeyringAdminServer(s grpc.ServiceRegistrar, srv KeyringAdminServer) {
	s.RegisterService(&KeyringAdmin_ServiceDesc, srv)
}

func _KeyringAdmin_NewKeyring_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyringSpec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyringAdminServer).NewKeyring(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keystone.keyringAdmin/newKeyring",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyringAdminServer).NewKeyring(ctx, req.(*KeyringSpec))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyringAdmin_Keys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyringSpec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyringAdminServer).Keys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keystone.keyringAdmin/keys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyringAdminServer).Keys(ctx, req.(*KeyringSpec))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyringAdmin_Label_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(keystone.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyringAdminServer).Label(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keystone.keyringAdmin/label",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyringAdminServer).Label(ctx, req.(*keystone.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyringAdmin_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(keystone.KeySpec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyringAdminServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keystone.keyringAdmin/remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyringAdminServer).Remove(ctx, req.(*keystone.KeySpec))
	}
	return interceptor(ctx, in, info, handler)
}

// KeyringAdmin_ServiceDesc is the grpc.ServiceDesc for KeyringAdmin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KeyringAdmin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "keystone.keyringAdmin",
	HandlerType: (*KeyringAdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "newKeyring",
			Handler:    _KeyringAdmin_NewKeyring_Handler,
		},
		{
			MethodName: "keys",
			Handler:    _KeyringAdmin_Keys_Handler,
		},
		{
			MethodName: "label",
			Handler:    _KeyringAdmin_Label_Handler,
		},
		{
			MethodName: "remove",
			Handler:    _KeyringAdmin_Remove_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "keystone2_admin.proto",
}
